def is_safe(board, row, col):
    # Check if there's a queen in the same column
    for i in range(row):
        if board[i] == col:
            return False
    
    # Check diagonals
    for i in range(row):
        if abs(board[i] - col) == abs(i - row):
            return False
    
    return True

def solve_n_queens(n):
    def solve(row):
        if row == n:
            solutions.append(board[:])
            return
        
        for col in range(n):
            if is_safe(board, row, col):
                board[row] = col
                solve(row + 1)
    
    solutions = []
    board = [-1] * n
    solve(0)
    return solutions

# Example usage
n = 8
solutions = solve_n_queens(n)
for solution in solutions:
    print(solution)




def water_jug_problem(x, y, z):
    if z % gcd(x, y) == 0 and z <= x + y:
        return True
    else:
        return False

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Input the capacities of the jugs and the desired amount of water to measure
jug_x = 3
jug_y = 5
desired_amount = 4

if water_jug_problem(jug_x, jug_y, desired_amount):
    print(f"Yes, you can measure {desired_amount} gallons of water using the jugs with capacities {jug_x} and {jug_y}.")
else:
    print(f"No, you cannot measure {desired_amount} gallons of water using the jugs with capacities {jug_x} and {jug_y}.")







import itertools
def tsp_brute_force(dist_matrix):
    return min((sum(dist_matrix[route[i]][route[i+1]] for i in range(len(route)-1)) + dist_matrix[route[-1]][route[0]], route) for route in itertools.permutations(range(len(dist_matrix))))[1]

# Example usage
dist_matrix = [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]]
print(tsp_brute_force(dist_matrix))




def clean(floor):
    for i in range(len(floor)):
        if floor[i] == 1:
            print("vaccuming at position:")
            print([i])
            floor[i] = 0
    print("Floor cleaned successfully!")

# Test the function
floor = [1, 0, 1, 1, 0, 1, 0, 1]
clean(floor)
